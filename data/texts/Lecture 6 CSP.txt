Debela Desalegn
April 11, 2025

: �� , �� , …, ��

: ������� , …, �������
�� takes values in �������

: specifying the relations between the variables

: An assignment �� : �� , �� : �� , …, �� : �� that satisfies all constraints

Example: Map Coloring
:

colors

:

: adjacent regions must have different

Implicit:
Explicit:

Solutions are assignments satisfying all
constraints, e.g.:

Real-World CSPs

Many real-world problems involve real-valued variables.

constraint
Variable

(more convenient for binary constraint CSPs)

Every constraint involves at most 2 variables

Treat it as a search problem
ü Assign one variable at a time
ü State: A partial assignment
ü Action: Assign value to an unassigned variable
ü Goal test: check whether all constraint are
satisfied
But there’s more structure to leverage
§ Variable ordering doesn’t matter
§ Variables are interdependent in a local way

Backtracking search = DFS + failure-on-violation

BacktrackingSearch({ }, Domain) returns an assignment or reports failure.
BacktrackingSearch(�, Domain):
If � is a complete assignment: return �.
Let �� be the next unassigned variable.
For each value � ∈ Domain� :
�′ ← � ∪ �� : �
If �′ violates constraints: continue
return BacktrackingSearch(�′ , Domain)
return failure

ü Forward checking

ü Maintaining arc consistency (more powerful than forward checking)
ü Dynamic ordering

Suppose we assign the variables in the order of
WA

WA, Q, V, NT, NSW, SA

NT

Q

NSW

V

No valid assignment for SA.
Then the algorithm backtracks to try other assignments…

SA

Cross off values that violate a constraint when added to
the existing assignment
WA

NT

Q

NSW

V

SA

Inconsistency found for SA (even though we haven’t reached the layer of SA).

BacktrackingSearch(�, Domain):
If � is a complete assignment: return �.
Let �� be the next unassigned variable.
For each value � ∈ Domain� :
� ′ ← � ∪ �� : �

If �′ violates constraints: continue
return BacktrackingSearch(�′ , Domain′)
return failure

BacktrackingSearch(�, Domain):
If � is a complete assignment: return �.
Let �� be the next unassigned variable.
For each value � ∈ Domain� :
� ′ ← � ∪ �� : �
Domain′ , Consistent = ForwardChecking(�′ , �� , �, Domain)
If not Consistent: continue
return BacktrackingSearch(�′ , Domain′)
return failure
ForwardChecking (�′ , �� , �, Domain):
Domain′ ← Domain
For all �� that is unassigned in �′ and connected to �� :
Delete values in Domain′� that are inconsistent with �� : �
If Domain′� is empty: return Domain′ , �����
return Domain′ , ����

With forward checking:
WA

NT

Q

NSW

V

SA

After assigning Q with green, NT and SA’s domains are left with only blue.

But NT and SA are neighbors, so there is no consistent assignment from here.
How can we detect such inconsistency at this step?

��

Domain�

��

Domain�

Fact. Let � ∈ Domain� be such that for all � ∈ Domain� , �� : �, �� : �
violates the constraint on (�� , �� ). Then we can remove � from Domain� .

Definition (Arc Consistency on �� → �� ). For all � ∈ Domain� , there is some
� ∈ Domain� such that �� : �, �� : � satisfies the constraint on (�� , �� ).
Idea to prune more: keep checking whether we can remove elements from any
Domain using the fact above. (i.e., always maintaining arc consistency).

: maintaining arc consistency from unassigned variables
to newly assigned variables.

WA

NT
SA

Q
NSW

V

We can prune more if we ensure arc consistency for all arcs.

WA

NT
SA

Q
NSW

V

If X’s domain changes, neighbors of X need to be rechecked!

Remember: Delete
from the tail!

AC3:
queue ← initial queue
while queue not empty:
(�� , �� ) ← POP(queue)
if arc �� → �� is not consistent:
Revise Domain� to make it consistent
if Domain� is empty: return �����
for each �� connected to �� :
add (�� , �� ) to queue
return ����

Useful when there is only one color left at the arc head

Actually, this is also the only useful case in the map coloring problem

�� ∈ Domain� = 1,2,3,4,5
�� ∈ Domain� = 1,2

Constraint: �� + �� = 4

ü Some failure modes cannot be detected by arc
consistency.
ü Therefore, we still need “backtracking”.

Combining AC3 with backtracking search:

BacktrackingSearch(�, Domain):
If � is a complete assignment: return �.
Let �� be the next unassigned variable.
For each value � ∈ Domain� :
� ′ ← � ∪ �� : �
Domain′ , Consistent = AC3(�′ , �� , �, Domain)
If not Consistent: continue
return BacktrackingSearch(�′ , Domain′)
return failure

AC3(�′ , �� , �, Domain):
Domain′ ← Domain
queue ← { �� , �� for all �� that is unassigned in �′ and connected to �� }
while queue not empty:
(�� , �ℓ ) ← POP(queue)
if arc �� → �ℓ is not consistent:
Revise Domain′� to make it consistent
if Domain′� is empty: return Domain′ , �����
for each �� that is unassigned in �′ and connected to �� :
add (�� , �� ) to queue
return Domain′ , ����

Drawbacks of backtracking search with arc-consistency check?

(= Arc-Consistency)For any assignment �� = �� , there exists an
assignment of �� = �� such that �� = �� , �� = �� satisfies the constraint on �� , �� .
For any consistent assignment �� = �� , �� = �� , there exists an assignment �� = �� such that
�� = �� , �� = �� , �� = �� satisfies constraints on (�� , �� ), �� , �� , �� , �� , �� .
For any consistent assignment �(1) = �(1) , …, �(�−1) = �(�−1) , there exists an assignment
�(�) = �(�) such that �(1) = �(1) , …, �(�) = �(�) satisfies all constraints among �(1) , …, �(�) .

BacktrackingSearch(�, Domain):
If � is a complete assignment: return �.
Which variable should we pick first?
Let �� be the next unassigned variable.
For each value � ∈ Domain� :
Which value should we try first?
� ′ ← � ∪ �� : �
Domain′ , Consistent = AC3(�′ , �� , �, Domain)
If not Consistent: continue
return BacktrackingSearch(�′ , Domain′)
return failure

Minimum Remaining Value (MRV) heuristic
Choose variable that has the fewest left values in its domain.

Why?
• Must assign every variable
• If going to fail, fail early  more pruning

WA

NT

Q

NSW

V

SA

WA

NT

Q

NSW

V

SA

Degree heuristic
Choose variable that is involved in the largest number of constraint.

Could be a good tie-breaking strategy along with MRV.

Least Constrained Value (LCV) heuristic
Choose the value that rules out the fewest values in the remaining variables.
Can be estimated by forward checking
or arc-consistency checking

Why?
● Needs to choose some value
● Choosing value most likely to lead to solution
● Unlike variable ordering where we have to consider all variables,
there is no need to consider all values

Minimum Remaining Value (MRV) heuristic
Choose variable that has the fewest left values in its domain.
Degree heuristic
Choose variable that is involved in the largest number of constraint.
Least Constrained Value (LCV) heuristic
Choose the value that rules out the fewest values in the remaining variables.

Start from some complete assignment that may not satisfy all constraints
Modify the assignment, trying to resolve violations

MinConflict (MaxSteps):
� ← an initial complete assignment
for iter = 1 to MaxStep:
if � is a solution then return �
Let �� be a randomly chosen conflicted variable
Let � be the value for �� that minimizes conflicts
Reassign �� = � in �

{1,2,3}

{1,2,3}

1

≠

≠

{1,2}

≠

{1,2,3}
≠

≠
{1,2}

2

3

3

1

3

1

2

A feasible solution

1

2

An unfortunate initialization for
MinConflict

For local search algorithms like MinConflict, we will randomly generate multiple
initial assignments. For each initial assignment, we will only run it for MaxStep
iterations before giving up.

